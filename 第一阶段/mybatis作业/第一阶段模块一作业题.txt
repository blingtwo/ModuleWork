一、简单题

1、Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
【答】：
Mybatis动态SQL定义：即在XML映射文件中，以XML标签的形式编写动态SQL，完成逻辑判断和动态拼接SQL的功能。
Mybatis提供了9种动态SQL标签：<if/>、<choose/>、<when/>、<otherwise/>、<trim/>、<when/>、<set/>、<foreach/>、<bind/>。
动态sql的执行原理：使用OGNL表达式，从SQL参数对象中计算表达式的值，根据表达式的值动态拼接SQL，完成动态SQL的功能。

2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
【答】：
Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。
实现原理：使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。

3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
【答】：
Mybatis的Executor执行器：SimpleExecutor、ReuseExecutor、BatchExecutor。
它们之间的区别：SimpleExecutor每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
                ReuseExecutor执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
                BatchExecutor执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。

4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
【答】：
（1）一级缓存：Mybatis的一级缓存是指SqlSession级别的，作用域是SqlSession，Mybatis默认开启一级缓存，在同一个SqlSession中，相同的Sql查询的时候，第一次查询的时候，就会从缓存中取，如果发现没有数据，那么就从数据库查询出来，并且缓存到HashMap中，如果下次还是相同的查询，就直接从缓存中查询，就不在去查询数据库，对应的就不在去执行SQL语句。当查询到的数据，进行增删改的操作的时候，缓存将会失效。
（2）二级缓存：二级缓存是mapper级别的缓存，多个SqlSession去操作同一个mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession。第一次调用mapper下的sql 的时候去查询信息，查询到的信息会存放到该mapper对应的二级缓存区域，第二次调用namespace下的mapper映射文件中，相同的SQL去查询，回去对应的二级缓存内取结果，如果在相同的namespace下的mapper映射文件中增删改，并且提交了失误，就会失效。

5、简述Mybatis的插件运行原理，以及如何编写一个插件？
【答】：
Mybatis的插件运行原理：Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。
编写插件步骤：第一步要实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法。
              第二步要在sqlMapConfig.xml文件中引入自定义插件。




二、编程题

请完善自定义持久层框架IPersistence，在现有代码基础上添加、修改及删除功能。【需要采用getMapper方式】
【答】：
IPersistence框架端修订内容：
（1）在XMLMapperBuilder.java中，【新增代码】获取UserMapper.xml中的insert/update/delete标签内容到configuration对象中。
（2）在SqlSession.java中SqlSession接口中，【新增代码】方法insertOne/updateOne/deleteOne
（3）在DefaultSqlSession.java中DefaultSqlSession实现类中，【新增代码】重写insertOne/updateOne/deleteOne方法（调用simpleExecutor中的方法获取数据库数据）。
     并在getMapper方法里面的invoke方法，【新增代码】判断是查询/新增/修改/删除操作，并调用相应的方法。

IPersistence_test客户端修订内容：
（1）UserMapper.xml中新增insert/update/delete标签写如sql语句。
（2）IUserDao.java中新增insertUser/updateUser/deleteUser方法。
（3）在IPersistenceTest.java中新增insertTest/updateTest/deleteTest方法进行测试。

最终的编码如文件夹【code】中所示。
